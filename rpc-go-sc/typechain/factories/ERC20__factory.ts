/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ERC20, ERC20Interface } from "../ERC20";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "_spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "remaining",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060408051808201909152601081526f26bc902430b9323430ba102a37b5b2b760811b602082015260029061004590826101bb565b506040805180820190915260038082526213521560ea1b60208301529061006c90826101bb565b506000805460ff1916601217905561008e33690218ae196b8d4f300000610093565b6102a1565b80600160008282546100a5919061027a565b90915550506001600160a01b038216600090815260046020526040812080548392906100d290849061027a565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061014657607f821691505b60208210810361016657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156101b657600081815260208120601f850160051c810160208610156101935750805b601f850160051c820191505b818110156101b25782815560010161019f565b5050505b505050565b81516001600160401b038111156101d4576101d461011c565b6101e8816101e28454610132565b8461016c565b602080601f83116001811461021d57600084156102055750858301515b600019600386901b1c1916600185901b1785556101b2565b600085815260208120601f198616915b8281101561024c5788860151825594840194600190910190840161022d565b508582101561026a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8082018082111561029b57634e487b7160e01b600052601160045260246000fd5b92915050565b61072c806102b06000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce5671461010357806370a082311461012257806395d89b411461014b578063a9059cbb14610153578063dd62ed3e1461016657600080fd5b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100d957806323b872dd146100f0575b600080fd5b6100a061019f565b6040516100ad9190610555565b60405180910390f35b6100c96100c43660046105bf565b61022d565b60405190151581526020016100ad565b6100e260015481565b6040519081526020016100ad565b6100c96100fe3660046105e9565b610299565b6000546101109060ff1681565b60405160ff90911681526020016100ad565b6100e2610130366004610625565b6001600160a01b031660009081526004602052604090205490565b6100a061045b565b6100c96101613660046105bf565b610468565b6100e2610174366004610647565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205490565b600280546101ac9061067a565b80601f01602080910402602001604051908101604052809291908181526020018280546101d89061067a565b80156102255780601f106101fa57610100808354040283529160200191610225565b820191906000526020600020905b81548152906001019060200180831161020857829003601f168201915b505050505081565b3360008181526005602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906102889086815260200190565b60405180910390a350600192915050565b6001600160a01b03831660009081526005602090815260408083203384529091528120548211156103085760405162461bcd60e51b81526020600482015260146024820152734e6f7420656e6f75676820616c6c6f77616e636560601b60448201526064015b60405180910390fd5b6001600160a01b0384166000908152600460205260409020548211156103705760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420656e6f756768206d6f6e657920746f207472616e736665720000000060448201526064016102ff565b6001600160a01b038416600090815260046020526040812080548492906103989084906106ca565b90915550506001600160a01b038316600090815260046020526040812080548492906103c59084906106e3565b90915550506001600160a01b0384166000908152600560209081526040808320338452909152812080548492906103fd9084906106ca565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161044991815260200190565b60405180910390a35060019392505050565b600380546101ac9061067a565b336000908152600460205260408120548211156104c75760405162461bcd60e51b815260206004820152601c60248201527f4e6f7420656e6f756768206d6f6e657920746f207472616e736665720000000060448201526064016102ff565b33600090815260046020526040812080548492906104e69084906106ca565b90915550506001600160a01b038316600090815260046020526040812080548492906105139084906106e3565b90915550506040518281526001600160a01b0384169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610288565b600060208083528351808285015260005b8181101561058257858101830151858201604001528201610566565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146105ba57600080fd5b919050565b600080604083850312156105d257600080fd5b6105db836105a3565b946020939093013593505050565b6000806000606084860312156105fe57600080fd5b610607846105a3565b9250610615602085016105a3565b9150604084013590509250925092565b60006020828403121561063757600080fd5b610640826105a3565b9392505050565b6000806040838503121561065a57600080fd5b610663836105a3565b9150610671602084016105a3565b90509250929050565b600181811c9082168061068e57607f821691505b6020821081036106ae57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156106dd576106dd6106b4565b92915050565b808201808211156106dd576106dd6106b456fea2646970667358221220d96f82e917f31f76fe3c62817973c535eea19d9ba2d68341a5a8c301a22c640d64736f6c63430008130033";

export class ERC20__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC20> {
    return super.deploy(overrides || {}) as Promise<ERC20>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ERC20 {
    return super.attach(address) as ERC20;
  }
  connect(signer: Signer): ERC20__factory {
    return super.connect(signer) as ERC20__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20Interface {
    return new utils.Interface(_abi) as ERC20Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): ERC20 {
    return new Contract(address, _abi, signerOrProvider) as ERC20;
  }
}
